{"version":3,"sources":["images/loading.gif","components/TestComponent/index.js","hooks/index.js","App.js","reportWebVitals.js","index.js"],"names":["ComponentData","url","opts","title","useState","data","setData","isLoading","setLoading","hasError","setError","useEffect","fetch","then","response","ok","Error","statusText","json","resolve","catch","error","message","finally","useJsonFetch","className","src","loadingGif","alt","JSON","stringify","App","process","method","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAAe,UAA0B,oC,OCG1B,SAASA,EAAT,GAA4C,IAApBC,EAAmB,EAAnBA,IAAKC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,MAChD,ECFa,SAAsBF,EAAKC,GACxC,MAAwBE,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA6BJ,mBAAS,MAAtC,mBAAOK,EAAP,KAAiBC,EAAjB,KAiBA,OAfAC,qBAAU,WACRH,GAAW,GAEXI,MAAMX,EAAKC,GACRW,MAAK,SAACC,GACL,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,YAE3B,OAAOH,EAASI,UAEjBL,MAAK,SAACM,GAAD,OAAab,EAAQa,MAC1BC,OAAM,SAACC,GAAD,OAAWX,EAASW,EAAMC,YAChCC,SAAQ,kBAAMf,GAAW,QAC3B,CAACP,EAAKC,IAEF,CAACG,EAAME,EAAWE,GDlBWe,CAAavB,EAAKC,GAAtD,mBAAOG,EAAP,KAAaE,EAAb,KAAwBE,EAAxB,KACA,OACE,sBAAKgB,UAAU,iBAAf,UACE,6BAAKtB,IACJI,GAAc,qBAAKmB,IAAKC,EAAYC,IAAI,UAAUH,UAAU,YAC5DpB,GAAQ,mBAAGoB,UAAU,OAAb,SAAqBI,KAAKC,UAAUzB,KAC5CI,GAAY,mBAAGgB,UAAU,QAAb,SAAsBI,KAAKC,UAAUrB,QEPzC,SAASsB,IACtB,OACE,qCACE,cAAC,EAAD,CACE9B,IAAK+B,6BACL9B,KAAM,CACJ+B,OAAQ,OAEV9B,MAAM,kBAER,cAAC,EAAD,CACEF,IAAK+B,8BACL9B,KAAM,CACJ+B,OAAQ,OAEV9B,MAAM,mBAER,cAAC,EAAD,CACEF,IAAK+B,gCACL9B,KAAM,CACJ+B,OAAQ,OAEV9B,MAAM,wBCzBd,IAYe+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.ebb56919.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/loading.65bbecad.gif\";","import useJsonFetch from '../../hooks';\nimport loadingGif from '../../images/loading.gif'\n\nexport default function ComponentData({url, opts, title}) {\n  const [data, isLoading, hasError] = useJsonFetch(url, opts);\n  return (\n    <div className=\"component-body\">\n      <h2>{title}</h2>\n      {isLoading &&  <img src={loadingGif} alt=\"loading\" className=\"loading\" />}\n      {data && <p className=\"data\">{JSON.stringify(data)}</p>}\n      {hasError && <p className=\"error\">{JSON.stringify(hasError)}</p>}\n    </div>\n  );\n}\n","import { useEffect, useState } from 'react';\n\nexport default function useJsonFetch(url, opts) {\n  const [data, setData] = useState(null);\n  const [isLoading, setLoading] = useState(false);\n  const [hasError, setError] = useState(null);\n\n  useEffect(() => {\n    setLoading(true);\n\n    fetch(url, opts)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n        return response.json();\n      })\n      .then((resolve) => setData(resolve))\n      .catch((error) => setError(error.message))\n      .finally(() => setLoading(false));\n  }, [url, opts]);\n\n  return [data, isLoading, hasError];\n}\n","import './App.css';\nimport TestComponent from './components/TestComponent';\n\nexport default function App() {\n  return (\n    <>\n      <TestComponent\n        url={process.env.REACT_APP_DATA_URL}\n        opts={{\n          method: 'GET',\n        }}\n        title=\"ComponentData\"\n      />\n      <TestComponent\n        url={process.env.REACT_APP_ERROR_URL}\n        opts={{\n          method: 'GET',\n        }}\n        title=\"ComponentError\"\n      />\n      <TestComponent\n        url={process.env.REACT_APP_LOADING_URL}\n        opts={{\n          method: 'GET',\n        }}\n        title=\"ComponentLoading\"\n      />\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}